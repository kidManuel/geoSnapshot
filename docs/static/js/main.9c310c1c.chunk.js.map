{"version":3,"sources":["components/Category.js","components/Form.js","components/Gallery.js","components/ImageThumbnail.js","components/GeoLocator.js","util/const.js","components/Header.js","components/Loader.js","util/suggestionsList.js","components/SuggestedNavigation.js","components/NoImages.js","components/NotFound.js","components/Welcome.js","App.js","util/apiUtil.js","serviceWorker.js","index.js"],"names":["Category","this","props","fetchCallback","searchTerm","prevProps","loading","images","toggleImageCallback","selectedImages","className","data","Component","Form","handleSubmit","history","useState","currentValue","setCurrentValue","useEffect","listen","onSubmit","event","formSubmit","type","name","placeholder","onChange","e","target","value","trim","disabled","height","width","d","fill","fillRule","Gallery","isImageSelected","image","find","element","id","length","map","key","toggleCallback","isSelected","isInGrid","ImageThumbnail","farm","server","secret","title","onClick","src","alt","slice","GoogleApiWrapper","apiKey","google","items","toggleMap","hoveredItem","setHoveredItem","prepMarker","item","latitude","longitude","position","lat","lng","setThumbnail","zoom","initialCenter","Header","Loader","suggestions","shuffleArray","array","temporaryValue","randomIndex","newArray","currentIndex","Math","floor","random","pickRandomSuggestions","ammount","SuggestedNavigation","setSuggestions","singleSuggestion","NoImages","NotFound","Welcome","App","bind","fetchPhotos","toggleImage","pickAll","pickNone","state","currentSearch","markers","isMapActive","memo","searchInput","preventDefault","setState","url","push","query","memoizedData","axios","get","getPhotoApiUrl","then","response","photoData","photos","photo","newMemoEntry","newMemoState","Object","assign","catch","error","console","newSelectedImages","inArrayPosition","findIndex","splice","render","exact","path","component","match","params","isOpen","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c310c1c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Loader, Gallery } from './';\r\n\r\nclass Category extends Component {\r\n  componentDidMount() {\r\n    // purposely not using an effect here.\r\n    const { fetchCallback, searchTerm } = this.props;\r\n    fetchCallback(searchTerm);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { fetchCallback, searchTerm } = this.props;\r\n    const { searchTerm: prevSearchTerm } = prevProps;\r\n\r\n    if (prevSearchTerm !== searchTerm) {\r\n      fetchCallback(searchTerm);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { loading, images, toggleImageCallback, selectedImages } = this.props;\r\n    return (\r\n      <div className='category'>\r\n        {\r\n          loading\r\n            ? <Loader />\r\n            : <Gallery\r\n              data={images}\r\n              selectedImages={selectedImages}\r\n              toggleImageCallback={toggleImageCallback}\r\n            />\r\n        }\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default Category;\r\n\r\nCategory.propTypes = {\r\n  searchTerm: PropTypes.string,\r\n  images: PropTypes.arrayOf(PropTypes.object),\r\n  selectedImages: PropTypes.arrayOf(PropTypes.object),\r\n  loading: PropTypes.bool,\r\n  fetchCallback: PropTypes.func,\r\n  toggleImageCallback: PropTypes.func\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Form = ({ handleSubmit, history }) => {\r\n  const [currentValue, setCurrentValue] = useState('');\r\n  useEffect(() => {\r\n    const unlisten = history.listen(() => {\r\n      setCurrentValue('');\r\n    });\r\n\r\n    return unlisten;\r\n  }, [history]);\r\n\r\n  // update search text state\r\n  const updateSearchInputValue = e => {\r\n    setCurrentValue(e.target.value);\r\n  };\r\n\r\n  const formSubmit = (event) => {\r\n    handleSubmit(currentValue, history, event);\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className='search-form'\r\n      onSubmit={event => formSubmit(event)}\r\n    >\r\n      <input\r\n        type='text'\r\n        name='search'\r\n        placeholder='Search...'\r\n        onChange={updateSearchInputValue}\r\n        value={currentValue}\r\n        className='searchInput'\r\n      />\r\n      <button\r\n        type='submit'\r\n        className={`search-button ${currentValue.trim() ? 'active' : null}`}\r\n        disabled={!currentValue.trim()}\r\n      >\r\n        <svg className='searchIcon' height='32' width='32'>\r\n          <path\r\n            d='M19.427 21.427a8.5 8.5 0 1 1 2-2l5.585 5.585c.55.55.546 1.43 0 1.976l-.024.024a1.399 1.399 0 0 1-1.976 0l-5.585-5.585zM14.5 21a6.5 6.5 0 1 0 0-13 6.5 6.5 0 0 0 0 13z'\r\n            fill='#ffffff'\r\n            fillRule='evenodd'\r\n          />\r\n        </svg>\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n\r\nForm.propTypes = {\r\n  history: PropTypes.object,\r\n  handleSubmit: PropTypes.func\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { NoImages, ImageThumbnail } from './';\r\n\r\nconst Gallery = ({ data, toggleImageCallback, selectedImages }) => {\r\n  const isImageSelected = (image) => {\r\n    return !!selectedImages.find((element) => element.id === image.id);\r\n  };\r\n\r\n  return (\r\n    <div className='imageGallery styledScrollbar'>\r\n      {\r\n        data.length\r\n          ? data.map(image => (\r\n            <ImageThumbnail\r\n              key={image.id}\r\n              data={image}\r\n              toggleCallback={toggleImageCallback}\r\n              isSelected={isImageSelected(image)}\r\n              isInGrid={true}\r\n            />))\r\n          : <NoImages />\r\n        // return 'not found' component if no images fetched\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Gallery;\r\n\r\nGallery.propTypes = {\r\n  data: PropTypes.arrayOf(\r\n    PropTypes.object\r\n  ),\r\n  selectedImages: PropTypes.arrayOf(\r\n    PropTypes.object\r\n  ),\r\n  toggleImageCallback: PropTypes.func\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ImageThumbnail = ({ data, toggleCallback = () => { }, isSelected, isInGrid }) => {\r\n  const {\r\n    farm,\r\n    server,\r\n    id,\r\n    secret,\r\n    title\r\n  } = data;\r\n\r\n  const getSrcUrl = () => {\r\n    return `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}_m.jpg`;\r\n  };\r\n\r\n  const prepLabelString = () => {\r\n    if (title.length > 50) {\r\n      return `${title.slice(0, 45)}...`;\r\n    }\r\n    return title;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`imageThumbnailWrapper ${isSelected ? 'active' : 'inactive'} ${isInGrid ? 'inGrid' : 'static'}`}\r\n      onClick={() => toggleCallback(data)}\r\n    >\r\n      <img\r\n        className='imageElement'\r\n        src={getSrcUrl()}\r\n        alt={title}\r\n      />\r\n      {\r\n        title\r\n          ? <div className='imageName'>\r\n            {prepLabelString()}\r\n          </div>\r\n          : null\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageThumbnail;\r\n\r\nImageThumbnail.propTypes = {\r\n  data: PropTypes.shape({\r\n    farm: PropTypes.number,\r\n    server: PropTypes.string,\r\n    id: PropTypes.string,\r\n    secret: PropTypes.string,\r\n    title: PropTypes.string\r\n  }),\r\n  toggleCallback: PropTypes.func,\r\n  isSelected: PropTypes.bool,\r\n  isInGrid: PropTypes.bool\r\n};\r\n","import { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { googleMapsApiKey } from '../util/const';\r\nimport ImageThumbnail from './ImageThumbnail';\r\n\r\nconst GeoLocator = ({ google, items, toggleMap }) => {\r\n  const [hoveredItem, setHoveredItem] = useState(null);\r\n\r\n  const setThumbnail = (item) => {\r\n    setHoveredItem(item);\r\n  };\r\n\r\n  const prepMarker = item => {\r\n    const { latitude, longitude, title, id } = item;\r\n    return <Marker\r\n      title={title}\r\n      position={{ lat: latitude, lng: longitude }}\r\n      key={id}\r\n      onClick={() => { setThumbnail(item); }}\r\n    />;\r\n  };\r\n\r\n  const toggleExpand = () => {\r\n    setHoveredItem(null);\r\n    toggleMap();\r\n  };\r\n\r\n  return (\r\n    <div className='geoWrapper'>\r\n      <div\r\n        className='toggleButton'\r\n        onClick={toggleExpand}\r\n      >\r\n        <svg height='32' width='32'>\r\n          <path className='iconToggle' d='M3.58,13.99l15.83,10.7c1.19,0.81,2.81-0.05,2.81-1.49V1.8c0-1.44-1.61-2.3-2.81-1.49L3.58,11.01\r\n     C2.52,11.72,2.52,13.28,3.58,13.99z'/>\r\n        </svg>\r\n      </div>\r\n      <Map\r\n        google={google}\r\n        zoom={2}\r\n        initialCenter={{ lat: 48.701, lng: 16.087 }}\r\n        className='geoLocator'\r\n      >\r\n        {\r\n          items.map((item) => prepMarker(item))\r\n        }\r\n      </Map>\r\n      {\r\n        hoveredItem\r\n          ? <ImageThumbnail\r\n            data={hoveredItem}\r\n            isInGrid={false}\r\n          />\r\n          : null\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: googleMapsApiKey\r\n})(GeoLocator);\r\n\r\nGeoLocator.propTypes = {\r\n  google: PropTypes.object,\r\n  items: PropTypes.arrayOf(PropTypes.object),\r\n  isOpen: PropTypes.bool,\r\n  toggleMap: PropTypes.func\r\n};\r\n","const photoApiBaseUrl = 'https://api.flickr.com/services/rest/?method=flickr.photos.search';\r\nconst flickrApiKey = '636e1481b4f3c446d26b8eb6ebfe7127';\r\nconst googleMapsApiKey = 'AIzaSyDmYGxBHZfm1i3kGKqNgT5zXTW2gMBOw88';\r\nconst perPageItems = 100;\r\nconst desiredFormat = 'json';\r\nconst otherParams = '&nojsoncallback=1';\r\nconst hasGeo = 1;\r\nconst extras = 'geo';\r\n\r\nexport {\r\n  photoApiBaseUrl,\r\n  flickrApiKey,\r\n  googleMapsApiKey,\r\n  perPageItems,\r\n  desiredFormat,\r\n  hasGeo,\r\n  extras,\r\n  otherParams\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Form, SuggestedNavigation } from './';\r\n\r\nconst Header = ({ history, handleSubmit }) => {\r\n  return (\r\n    <div className='pageHeader'>\r\n      <div\r\n        className='pageLogo'\r\n        onClick={() => handleSubmit('', history)}\r\n      >\r\n        <span id='geo'>geo</span><span id='snapshot'>SNAPSHOT</span>\r\n      </div>\r\n      <div className='headerMain'>\r\n        <Form history={history} handleSubmit={handleSubmit} />\r\n        <SuggestedNavigation handleSubmit={handleSubmit} history={history} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n\r\nHeader.propTypes = {\r\n  history: PropTypes.object,\r\n  handleSubmit: PropTypes.func\r\n};\r\n","import React from 'react';\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className='loader'>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","const suggestions = [\r\n  'Mountain',\r\n  'Lake',\r\n  'Forest',\r\n  'People',\r\n  'Food',\r\n  'Monument',\r\n  'Art',\r\n  'Museum',\r\n  'Graffitti',\r\n  'Music',\r\n  'Dance',\r\n  'Concert',\r\n  'Games',\r\n  'Night',\r\n  'Portrait',\r\n  'Beach',\r\n  'Casino',\r\n  'Park',\r\n  'Animal',\r\n  'Cat',\r\n  'Dog',\r\n  'Cemetery',\r\n  'Historic',\r\n  'Attraction',\r\n  'Sight',\r\n  'Woods',\r\n  'Store',\r\n  'Shopping',\r\n  'Restaurant',\r\n  'University',\r\n  'Hike',\r\n  'Zoo',\r\n  'Castle'\r\n];\r\n\r\nconst shuffleArray = (array) => {\r\n  // stolen from stackoverflow...\r\n  const newArray = [...array];\r\n  let currentIndex = newArray.length;\r\n  let temporaryValue, randomIndex;\r\n  while (currentIndex !== 0) {\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n    temporaryValue = newArray[currentIndex];\r\n    newArray[currentIndex] = newArray[randomIndex];\r\n    newArray[randomIndex] = temporaryValue;\r\n  }\r\n  return newArray;\r\n};\r\n\r\nconst pickRandomSuggestions = (ammount = 5) => {\r\n  return shuffleArray(suggestions).slice(0, ammount + 1);\r\n};\r\n\r\nexport { pickRandomSuggestions };\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { pickRandomSuggestions } from '../util/suggestionsList';\r\n\r\nconst SuggestedNavigation = ({ handleSubmit, history }) => {\r\n  const [suggestions, setSuggestions] = useState(pickRandomSuggestions());\r\n  useEffect(() => {\r\n    const unlisten = history.listen(() => {\r\n      setSuggestions(pickRandomSuggestions());\r\n    });\r\n    return unlisten;\r\n  });\r\n\r\n  return (\r\n    <nav className='navSuggestionWrapper'>\r\n      <div className='navSuggestionLabel'>Try searching for...</div>\r\n      <ul className='navSuggestionLinkList'>\r\n        {\r\n          suggestions.map((singleSuggestion) => (\r\n            <li className='navSuggestion' key={singleSuggestion}>\r\n              <div\r\n                className='navLink'\r\n                onClick={\r\n                  () => handleSubmit(singleSuggestion, history)\r\n                }>{singleSuggestion}\r\n              </div>\r\n            </li>\r\n          ))\r\n        }\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default SuggestedNavigation;\r\n\r\nSuggestedNavigation.propTypes = {\r\n  handleSubmit: PropTypes.func,\r\n  history: PropTypes.object\r\n};\r\n","import React from 'react';\r\n\r\nconst NoImages = () => (\r\n  <div className='specialPage'>\r\n    <h2>No Images Found</h2>\r\n    <p>Please try a different search term</p>\r\n  </div>\r\n);\r\n\r\nexport default NoImages;\r\n","import React from 'react';\r\n\r\nconst NotFound = () => (\r\n  <div className='not-found'>\r\n    <h2>Page Not Found</h2>\r\n  </div>\r\n);\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\n\r\nconst Welcome = () => (\r\n  <div className='specialPage'>\r\n    <h2>Welcome to <span className=\"welcomeGeo\">geoSnapShot!</span></h2>\r\n    <h3>Try searching for anything!</h3>\r\n  </div>\r\n);\r\n\r\nexport default Welcome;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nimport {\r\n  Header,\r\n  Category,\r\n  NotFound,\r\n  Welcome,\r\n  GeoLocator\r\n} from './components';\r\n\r\nimport { getPhotoApiUrl } from './util/apiUtil';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.fetchPhotos = this.fetchPhotos.bind(this);\r\n    this.toggleMap = this.toggleMap.bind(this);\r\n    this.toggleImage = this.toggleImage.bind(this);\r\n    this.pickAll = this.pickAll.bind(this);\r\n    this.pickNone = this.pickNone.bind(this);\r\n\r\n    this.state = {\r\n      currentSearch: '',\r\n      images: [],\r\n      loading: false,\r\n      markers: [],\r\n      isMapActive: true,\r\n      selectedImages: [],\r\n      memo: {}\r\n    };\r\n  }\r\n\r\n  // Prevent page reload, clear input, set URL and push history on submit\r\n  handleSubmit(searchInput, history, event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    this.setState({\r\n      loading: true,\r\n      currentSearch: searchInput\r\n    }, () => {\r\n      const url = `/${searchInput}`;\r\n      history.push(url);\r\n    });\r\n  };\r\n\r\n  fetchPhotos(query) {\r\n    const { memo } = this.state;\r\n    const memoizedData = memo[query];\r\n\r\n    if (memoizedData) {\r\n      this.setState({\r\n        images: memoizedData,\r\n        loading: false,\r\n        currentSearch: query,\r\n        selectedImages: []\r\n      });\r\n    } else {\r\n      axios\r\n        .get(getPhotoApiUrl(query))\r\n        .then(response => {\r\n          const photoData = response.data.photos.photo;\r\n          const newMemoEntry = { [query]: photoData };\r\n          const newMemoState = Object.assign({ ...memo }, newMemoEntry);\r\n\r\n          this.setState({\r\n            images: photoData,\r\n            loading: false,\r\n            currentSearch: query,\r\n            memo: newMemoState,\r\n            selectedImages: []\r\n          });\r\n        })\r\n        .catch(error => {\r\n          console.error(\r\n            'Encountered an error with fetching and parsing data',\r\n            error\r\n          );\r\n        });\r\n    }\r\n  };\r\n\r\n  toggleMap() {\r\n    const { isMapActive } = this.state;\r\n    this.setState({\r\n      isMapActive: !isMapActive\r\n    });\r\n  }\r\n\r\n  toggleImage(image) {\r\n    const { selectedImages } = this.state;\r\n    const newSelectedImages = [...selectedImages];\r\n    const inArrayPosition = newSelectedImages.findIndex((element) => element.id === image.id);\r\n    if (inArrayPosition > -1) {\r\n      newSelectedImages.splice(inArrayPosition, 1);\r\n    } else {\r\n      newSelectedImages.push(image);\r\n    }\r\n\r\n    this.setState({\r\n      selectedImages: newSelectedImages\r\n    });\r\n  }\r\n\r\n  pickAll() {\r\n    const { images } = this.state;\r\n    const newSelectedImages = [...images];\r\n    this.setState({\r\n      selectedImages: newSelectedImages\r\n    });\r\n  }\r\n\r\n  pickNone() {\r\n    this.setState({\r\n      selectedImages: []\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { images, loading, isMapActive, selectedImages, currentSearch } = this.state;\r\n\r\n    return (\r\n      <BrowserRouter>\r\n        <Route\r\n          render={props => (\r\n            <Header\r\n              handleSubmit={this.handleSubmit}\r\n              history={props.history}\r\n            />\r\n          )}\r\n        />\r\n        <main className={`snapShotContainer ${isMapActive ? 'active' : 'inactive'}`}>\r\n          <div className={`categoryInfo ${currentSearch.length ? 'active' : 'inactive'}`}>\r\n            <h2 className='categoryTitle'>Showing pictures of: <span className='searchQueryInCategory'>{currentSearch}</span></h2>\r\n            <div className=\"displayOptions\">\r\n              <h3\r\n                className=\"massSelector\"\r\n                onClick={this.pickAll}\r\n              >\r\n                Pick All\r\n              </h3>\r\n              <h3\r\n                className=\"massSelector\"\r\n                onClick={this.pickNone}\r\n              >\r\n                Clear Selection\r\n              </h3>\r\n            </div>\r\n            <div className={`selectionTooltip ${selectedImages.length ? 'active' : 'inactive'}`}>See your selections in the map! → </div>\r\n          </div>\r\n          <Switch>\r\n            <Route\r\n              exact\r\n              path='/'\r\n              component={Welcome}\r\n            />\r\n            <Route\r\n              path='/:searchInput'\r\n              render={props => (\r\n                <Category\r\n                  searchTerm={props.match.params.searchInput}\r\n                  images={images}\r\n                  selectedImages={selectedImages}\r\n                  loading={loading}\r\n                  fetchCallback={this.fetchPhotos}\r\n                  toggleImageCallback={this.toggleImage}\r\n                />\r\n              )}\r\n            />\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n          <GeoLocator\r\n            items={selectedImages}\r\n            isOpen={isMapActive}\r\n            toggleMap={this.toggleMap}\r\n          />\r\n        </main>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import {\r\n  photoApiBaseUrl,\r\n  flickrApiKey,\r\n  perPageItems,\r\n  desiredFormat,\r\n  hasGeo,\r\n  extras,\r\n  otherParams\r\n} from './const';\r\n\r\nconst getPhotoApiUrl = (query) => {\r\n  return `${photoApiBaseUrl}&api_key=${flickrApiKey}&tags=${query}&has_geo=${hasGeo}&per_page=${perPageItems}&format=${desiredFormat}&extras=${extras}${otherParams}`;\r\n};\r\n\r\nexport { getPhotoApiUrl };\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './reset.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}